// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client"
  output   = "./generated"
  engineType = "library"
  runtime = "bun"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password_hash String
  global_status UserStatus @default(ACTIVE)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  name          String?

  // Relations
  devices       UserDevice[]
  audit_logs    AuditLog[]
  notifications Notification[]
}

model UserDevice {
  id                Int      @id @default(autoincrement())
  user_id           Int
  refresh_token_hash String
  ip_address        String?
  user_agent        String?
  login_time        DateTime @default(now())
  is_revoked        Boolean  @default(false)
  expires_at        DateTime

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([refresh_token_hash])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  level     LogLevel
  user_id   Int?
  ip_address String?
  action    String
  details   Json? // JSONB in PostgreSQL

  // Relations
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([timestamp])
  @@index([level])
}

model Notification {
  id                  Int              @id @default(autoincrement())
  title               String
  body                String
  recipient_id        Int
  status              NotificationStatus @default(DELIVERED)
  related_entity_id   Int?
  related_entity_type String?
  created_at          DateTime         @default(now())

  // Relations
  recipient User @relation(fields: [recipient_id], references: [id], onDelete: Cascade)

  @@index([recipient_id])
  @@index([status])
  @@index([created_at])
  @@index([related_entity_type, related_entity_id])
}

// Enums
enum UserStatus {
  ACTIVE
  BANNED
  ADMIN
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

enum NotificationStatus {
  DELIVERED
  SEEN
}